#  1. What is Systems Design?

This section captures key insights from the first video in the *System Design* series by **Jordan Has No Life**, focusing on data storage fundamentals and the motivation for using dedicated data storage systems in scalable architectures.

---
## ðŸ”¸ Types of Storage

### 1. **HDD/SSD (Persistent Storage)**
- Hard Disk Drives (HDDs) and Solid State Drives (SSDs) are **persistent** forms of storage.
- Data remains intact until explicitly deleted or the hardware fails.
- Ideal for storing application-critical data that needs to persist beyond program execution or system reboots.


### 2. **RAM (Volatile Storage)**
- Random Access Memory (RAM) is **temporary** and volatile.
- Data stored in RAM is erased when the system is powered off or restarted.
- Suitable for short-term, high-speed data access during computation but **not viable** for long-term storage.

**Conclusion:** For persistent data needsâ€”like user information, configurations, or logsâ€”**HDD/SSD-based storage** solutions are required.
 
Why Not Store Data on Application Servers?
Storing data directly on an application server (i.e., in files on a virtual machine) introduces several issues:
1. **Operating System and Resource Complexity**
- Application servers handle numerous responsibilities (e.g., OS tasks, serving user requests, memory management).
- Adding data storage responsibilities increases resource contention and operational complexity.

 2. **Poor Support for Concurrent Clients**
- File-based storage is inefficient for handling concurrent read/write operations from multiple clients.
- Lack of built-in concurrency control mechanisms leads to potential data corruption or access conflicts.

3. **No Separation of Concerns**
- Merging application logic and data management on a single server breaks modularity.
- Violates the **Separation of Concerns (SoC)** principle, making the system harder to scale, debug, and maintain.

4. **Scalability Challenges**
- Application servers are already a bottleneck under heavy request loads.
- Adding file I/O duties to them exacerbates latency and negatively impacts overall system performance.

**Insight:** Application servers should **not be burdened** with data persistence responsibilities in scalable architectures.

 Why Use a Database (DB)?
- A **Database** is a dedicated service or server optimized for data storage, retrieval, and management.
- Unlike raw file storage, databases:
  - Handle structured querying.
  - Support concurrent access safely.
  - Provide transactional guarantees (ACID properties).
  - Scale more predictably under load.
The database becomes the **central data store** that the application can reliably interact with.

But One Database Isnâ€™t Enough...
- While a single DB instance improves data management, it's still a **single point of failure** and a **scalability bottleneck**.
- Modern system design requires distributed storage architectures, replication, sharding, and redundancy strategies.






